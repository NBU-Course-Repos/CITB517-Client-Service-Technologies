// <auto-generated />
using System;
using App.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Migrations
{
    [DbContext(typeof(AppDatabaseContext))]
    [Migration("20240120183841_Updated media entity")]
    partial class Updatedmediaentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("App.Persistence.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CommentatorEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MediaId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CommentatorEmail");

                    b.HasIndex("MediaId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("App.Persistence.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UploaderEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UploaderEmail");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("App.Persistence.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.Persistence.Models.Comment", b =>
                {
                    b.HasOne("App.Persistence.Models.User", "Commentator")
                        .WithMany("Comments")
                        .HasForeignKey("CommentatorEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Persistence.Models.Media", "Media")
                        .WithMany("Comments")
                        .HasForeignKey("MediaId");

                    b.Navigation("Commentator");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("App.Persistence.Models.Media", b =>
                {
                    b.HasOne("App.Persistence.Models.User", "Uploader")
                        .WithMany("Uploads")
                        .HasForeignKey("UploaderEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("App.Persistence.Models.Media", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("App.Persistence.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Uploads");
                });
#pragma warning restore 612, 618
        }
    }
}
